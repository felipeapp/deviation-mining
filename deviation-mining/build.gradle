/*
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/current/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the eclipse plugin to add support for Eclipse projects
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group 'deviation-mining'
version '0.0.1-SNAPSHOT'

compileJava.options.encoding = 'ISO-8859-1'
compileTestJava.options.encoding = 'ISO-8859-1'
compileJava.options.debugOptions.debugLevel = "source,lines,vars"
compileTestJava.options.debugOptions.debugLevel = "source,lines,vars"


// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    jcenter()
    
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
	compile 'org.slf4j:slf4j-simple:1.7.18'                               // SLF4J Simple Binding
	compile 'org.mongodb:mongo-java-driver:3.2.2'                         // Driver to access mongoDB 
	compile 'org.springframework.data:spring-data-mongodb:1.8.4.RELEASE'  // Spring Data support to MongoDB
	compile 'org.postgresql:postgresql:9.4.1208'                          // Driver to access PostgreSQL
	compile 'org.apache.commons:commons-math3:3.6'                        // Apache Commons Math
	compile 'com.google.guava:guava:19.0'                                 // Utility classes, google's collections
	compile 'com.github.lucarosellini.rJava:JRIEngine:0.9-7'              // allows to run R inside Java applications as a single thread
	
    // JUnit and Mockito test frameworks
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.9.5'
}


/* Task to run the unit tests for each build */
task unitTest(type: Test, dependsOn: testClasses, group: test, description: "Run the unit tests") {
 
   include '**/AllUnitTests.*'
   exclude '**/AllIntegrationTests.*'
}
 
/* Task to run the integration tests just for especific builds */
task integrationTest(type: Test, dependsOn: testClasses, group: test, description: "Run the integration tests") {
 
   include '**/AllIntegrationTests.*'
   exclude '**/AllUnitTests.*'
 
}
 
/* Configuration for all tests */
tasks.withType(Test) {
 
    /* Memory the will be used in the test */
    jvmArgs "-XX:MaxPermSize=1024m"
}
/* Disable test in the build, run the test only when call the specific task */
test {
   exclude '**/*'
}


// Configure the eclipse project and classpath
eclipse {
    project {
  		natures 'org.springsource.ide.eclipse.gradle.core.nature', 'org.eclipse.buildship.core.gradleprojectnature'
	}

  	classpath {
  		containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
	  	containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
  	  	defaultOutputDir = file('bin')
  	}
}
